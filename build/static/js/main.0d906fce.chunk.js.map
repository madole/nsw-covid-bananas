{"version":3,"sources":["../external \"Cesium\"","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Cesium","Ion","defaultAccessToken","TERRAIN_PROVIDER","CesiumTerrainProvider","url","IonResource","fromAssetId","userAgent","navigator","toLowerCase","App","ref","useRef","useState","hovered","setHovered","data","setData","useEffect","fetch","then","resp","json","date","cartesians","monitor","map","item","Lat","Lon","lon","Number","split","lat","position","Cartesian3","fromDegrees","useCovidData","current","cesiumElement","animation","container","style","visibility","timeline","scene","globe","enableLighting","includes","forceResize","console","log","className","Date","toDateString","top","left","right","bottom","baseLayerPicker","requestRenderMode","terrainProvider","onMouseEnter","e","onMouseLeave","uri","minimumPixelSize","maximumPixelSize","latitude","longitude","Object","entries","k","v","Time","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qGAAAA,EAAOC,QAAUC,Q,wKCMjBC,MAAIC,mBAAqB,oNAGzB,IA8BMC,EAAmB,IAAIC,wBAAsB,CAC/CC,IAAKC,cAAYC,YAAY,KAG3BC,EAAYC,UAAUD,UAAUE,cAoDvBC,MAlDf,WACI,IAAMC,EAAMC,iBAAO,MACnB,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAlCW,WACjB,MAAwBH,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAoBA,OAnBAC,qBAAU,WACNC,MARS,oJASJC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,YAAmB,IAAjBG,EAAgB,EAAhBA,KAAMP,EAAU,EAAVA,KACAQ,EAAU,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAMS,QAAQC,KAAI,SAACC,GAClC,IAAOC,EAAYD,EAAZC,IAAKC,EAAOF,EAAPE,IACNC,EAAMC,OAAOF,EAAIG,MAAM,KAAK,IAC5BC,EAAMF,OAAOH,EAAII,MAAM,KAAK,IAC5BE,EAAWC,aAAWC,YACxBN,EACAG,GAEJ,OAAO,2BAAIN,GAAX,IAAiBO,gBAErBjB,EAAQ,CAACM,OAAMC,oBAG5B,IAEIR,EAaMqB,GASb,OARAnB,qBAAU,WACDF,IACLL,EAAI2B,QAAQC,cAAcC,UAAUC,UAAUC,MAAMC,WAAa,SACjEhC,EAAI2B,QAAQC,cAAcK,SAASH,UAAUC,MAAMC,WAAa,SAChEhC,EAAI2B,QAAQC,cAAcM,MAAMC,MAAMC,gBAAkBxC,EAAUyC,SAAS,WAC3ErC,EAAI2B,QAAQC,cAAcU,iBAC3B,CAACjC,IAECA,GAGLkC,QAAQC,IAAIrC,GAGR,qCACI,qBAAIsC,UAAU,QAAd,UACI,kDACA,8BAAM,IAAIC,KAAKrC,EAAKO,MAAM+B,oBAE9B,cAAC,IAAD,CAAQ3C,IAAKA,EAAK+B,MAAO,CAACR,SAAU,WAAYqB,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,GAC3EC,iBAAiB,EACjBC,mBAAmB,EACnBC,gBAAiB3D,EAHzB,SAKKc,EAAKQ,WAAWE,KAAI,SAAAC,GAAI,OACrB,cAAC,IAAD,CAAQO,SAAUP,EAAKO,SACf4B,aAAc,SAACC,GAAD,OAAOhD,EAAWY,IAAOqC,aAAc,kBAAMjD,EAAW,OAD9E,SAEI,cAAC,IAAD,CAAekD,IAAK,eAAgBC,iBAAkB,IAAKC,iBAAkB,OAF3CxC,EAAKO,SAASkC,SAAWzC,EAAKO,SAASmC,gBAMrF,qBAAKjB,UAAS,mBAActC,EAAU,UAAY,IAAlD,SACI,gCACKA,GAAWwD,OAAOC,QAAQzD,GAASY,KAAI,YAAa,IAAD,mBAAV8C,EAAU,KAAPC,EAAO,KAChD,GAAU,aAAND,GAA0B,qBAANA,EACxB,OAAO,+BACH,oBAAIpB,UAAU,YAAd,SAA2BoB,IAC3B,6BAAKC,MAFF,UAAY3D,EAAQ4D,MAApB,OAA2BF,EAA3B,cAAkCC,eA1BlD,6CC9CAE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0d906fce.chunk.js","sourcesContent":["module.exports = Cesium;","import * as React from 'react';\nimport {useEffect, useRef, useState} from 'react';\nimport {Entity, ModelGraphics, Viewer} from 'resium'\nimport './App.css';\nimport {Cartesian3, CesiumTerrainProvider, Ion, IonResource} from 'cesium'\n\nIon.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJjMjk3OGRkNS0zZTZjLTQyZGYtYjAzNy1lYTk5NmY3NDkyZTMiLCJpZCI6MzMxMzksInNjb3BlcyI6WyJhc3IiLCJnYyJdLCJpYXQiOjE1OTgwNjc1ODh9.KjJzjblyvrJlF0WkZZznyR6FXfNZY432yc19DtT1Ozc'\n\n\nconst DATA_URL = \"https://data.nsw.gov.au/data/dataset/0a52e6c1-bc0b-48af-8b45-d791a6d8e289/resource/f3a28eed-8c2a-437b-8ac1-2dab3cf760f9/download/venue-data.json\";\n\n/**\n * Data fetching hook\n */\nconst useCovidData = () => {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        fetch(DATA_URL)\n            .then((resp) => resp.json())\n            .then(({date, data}) => {\n                    const cartesians = data?.monitor.map((item) => {\n                        const {Lat, Lon} = item\n                        const lon = Number(Lon.split(',')[0])\n                        const lat = Number(Lat.split(',')[0])\n                        const position = Cartesian3.fromDegrees(\n                            lon,\n                            lat\n                        )\n                        return {...item, position}\n                    })\n                    setData({date, cartesians});\n                }\n            )\n    }, []);\n\n    return data;\n};\n\n\nconst TERRAIN_PROVIDER = new CesiumTerrainProvider({\n    url: IonResource.fromAssetId(1),\n})\n\nconst userAgent = navigator.userAgent.toLowerCase()\n\nfunction App() {\n    const ref = useRef(null);\n    const [hovered, setHovered] = useState(null);\n    const data = useCovidData()\n    useEffect(() => {\n        if (!data) return\n        ref.current.cesiumElement.animation.container.style.visibility = 'hidden';\n        ref.current.cesiumElement.timeline.container.style.visibility = 'hidden';\n        ref.current.cesiumElement.scene.globe.enableLighting = !userAgent.includes('android');\n        ref.current.cesiumElement.forceResize();\n    }, [data])\n\n    if (!data) {\n        return <h1>Loading...</h1>\n    }\n    console.log(hovered)\n\n    return (\n        <>\n            <h1 className=\"title\">\n                <div>COVID Locations</div>\n                <div>{new Date(data.date).toDateString()}</div>\n            </h1>\n            <Viewer ref={ref} style={{position: 'absolute', top: 0, left: 0, right: 0, bottom: 0}}\n                    baseLayerPicker={false}\n                    requestRenderMode={true}\n                    terrainProvider={TERRAIN_PROVIDER}\n            >\n                {data.cartesians.map(item => (\n                    <Entity position={item.position} key={item.position.latitude + item.position.longitude}\n                            onMouseEnter={(e) => setHovered(item)} onMouseLeave={() => setHovered(null)}>\n                        <ModelGraphics uri={\"/banana.gltf\"} minimumPixelSize={200} maximumPixelSize={500}/>\n                    </Entity>\n                ))}\n            </Viewer>\n            <div className={`info-box ${hovered ? \"hovered\" : \"\"}`}>\n                <table>\n                    {hovered && Object.entries(hovered).map(([k, v]) => {\n                        if (k === 'position' || k === 'HealthAdviceHTML') return\n                        return <tr key={`${hovered.Time}${k} - ${v}`}>\n                            <td className=\"table-key\">{k}</td>\n                            <td>{v}</td>\n                        </tr>\n                    })}\n                </table>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}